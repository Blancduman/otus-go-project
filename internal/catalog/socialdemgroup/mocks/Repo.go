// Code generated by mockery v2.34.0. DO NOT EDIT.

package mocks

import (
	context "context"

	socialdemgroup "github.com/Blancduman/banners-rotation/internal/catalog/socialdemgroup"
	mock "github.com/stretchr/testify/mock"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, socialDemGroup
func (_m *Repo) Create(ctx context.Context, socialDemGroup socialdemgroup.SocialDemGroup) (int64, error) {
	ret := _m.Called(ctx, socialDemGroup)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, socialdemgroup.SocialDemGroup) (int64, error)); ok {
		return rf(ctx, socialDemGroup)
	}
	if rf, ok := ret.Get(0).(func(context.Context, socialdemgroup.SocialDemGroup) int64); ok {
		r0 = rf(ctx, socialDemGroup)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, socialdemgroup.SocialDemGroup) error); ok {
		r1 = rf(ctx, socialDemGroup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Repo) Delete(ctx context.Context, id int64) (int64, error) {
	ret := _m.Called(ctx, id)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int64, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id
func (_m *Repo) Get(ctx context.Context, id int64) (socialdemgroup.SocialDemGroup, error) {
	ret := _m.Called(ctx, id)

	var r0 socialdemgroup.SocialDemGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (socialdemgroup.SocialDemGroup, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) socialdemgroup.SocialDemGroup); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(socialdemgroup.SocialDemGroup)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *Repo) GetAll(ctx context.Context) ([]socialdemgroup.SocialDemGroup, error) {
	ret := _m.Called(ctx)

	var r0 []socialdemgroup.SocialDemGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]socialdemgroup.SocialDemGroup, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []socialdemgroup.SocialDemGroup); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]socialdemgroup.SocialDemGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, socialDemGroup
func (_m *Repo) Update(ctx context.Context, socialDemGroup socialdemgroup.SocialDemGroup) (int64, error) {
	ret := _m.Called(ctx, socialDemGroup)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, socialdemgroup.SocialDemGroup) (int64, error)); ok {
		return rf(ctx, socialDemGroup)
	}
	if rf, ok := ret.Get(0).(func(context.Context, socialdemgroup.SocialDemGroup) int64); ok {
		r0 = rf(ctx, socialDemGroup)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, socialdemgroup.SocialDemGroup) error); ok {
		r1 = rf(ctx, socialDemGroup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
