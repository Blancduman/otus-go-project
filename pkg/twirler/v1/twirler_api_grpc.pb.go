// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/twirler_api.proto

package twirlerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TwirlerAPI_AttachBanner_FullMethodName   = "/twirler.v1.TwirlerAPI/AttachBanner"
	TwirlerAPI_DetachBanner_FullMethodName   = "/twirler.v1.TwirlerAPI/DetachBanner"
	TwirlerAPI_IncrementCount_FullMethodName = "/twirler.v1.TwirlerAPI/IncrementCount"
	TwirlerAPI_Gimme_FullMethodName          = "/twirler.v1.TwirlerAPI/Gimme"
)

// TwirlerAPIClient is the client API for TwirlerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwirlerAPIClient interface {
	AttachBanner(ctx context.Context, in *AttachBannerRequest, opts ...grpc.CallOption) (*AttachBannerResponse, error)
	DetachBanner(ctx context.Context, in *DetachBannerRequest, opts ...grpc.CallOption) (*DetachBannerResponse, error)
	IncrementCount(ctx context.Context, in *IncrementCountRequest, opts ...grpc.CallOption) (*IncrementCountResponse, error)
	Gimme(ctx context.Context, in *GimmeRequest, opts ...grpc.CallOption) (*GimmeResponse, error)
}

type twirlerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTwirlerAPIClient(cc grpc.ClientConnInterface) TwirlerAPIClient {
	return &twirlerAPIClient{cc}
}

func (c *twirlerAPIClient) AttachBanner(ctx context.Context, in *AttachBannerRequest, opts ...grpc.CallOption) (*AttachBannerResponse, error) {
	out := new(AttachBannerResponse)
	err := c.cc.Invoke(ctx, TwirlerAPI_AttachBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twirlerAPIClient) DetachBanner(ctx context.Context, in *DetachBannerRequest, opts ...grpc.CallOption) (*DetachBannerResponse, error) {
	out := new(DetachBannerResponse)
	err := c.cc.Invoke(ctx, TwirlerAPI_DetachBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twirlerAPIClient) IncrementCount(ctx context.Context, in *IncrementCountRequest, opts ...grpc.CallOption) (*IncrementCountResponse, error) {
	out := new(IncrementCountResponse)
	err := c.cc.Invoke(ctx, TwirlerAPI_IncrementCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twirlerAPIClient) Gimme(ctx context.Context, in *GimmeRequest, opts ...grpc.CallOption) (*GimmeResponse, error) {
	out := new(GimmeResponse)
	err := c.cc.Invoke(ctx, TwirlerAPI_Gimme_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwirlerAPIServer is the server API for TwirlerAPI service.
// All implementations should embed UnimplementedTwirlerAPIServer
// for forward compatibility
type TwirlerAPIServer interface {
	AttachBanner(context.Context, *AttachBannerRequest) (*AttachBannerResponse, error)
	DetachBanner(context.Context, *DetachBannerRequest) (*DetachBannerResponse, error)
	IncrementCount(context.Context, *IncrementCountRequest) (*IncrementCountResponse, error)
	Gimme(context.Context, *GimmeRequest) (*GimmeResponse, error)
}

// UnimplementedTwirlerAPIServer should be embedded to have forward compatible implementations.
type UnimplementedTwirlerAPIServer struct {
}

func (UnimplementedTwirlerAPIServer) AttachBanner(context.Context, *AttachBannerRequest) (*AttachBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachBanner not implemented")
}
func (UnimplementedTwirlerAPIServer) DetachBanner(context.Context, *DetachBannerRequest) (*DetachBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachBanner not implemented")
}
func (UnimplementedTwirlerAPIServer) IncrementCount(context.Context, *IncrementCountRequest) (*IncrementCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementCount not implemented")
}
func (UnimplementedTwirlerAPIServer) Gimme(context.Context, *GimmeRequest) (*GimmeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gimme not implemented")
}

// UnsafeTwirlerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwirlerAPIServer will
// result in compilation errors.
type UnsafeTwirlerAPIServer interface {
	mustEmbedUnimplementedTwirlerAPIServer()
}

func RegisterTwirlerAPIServer(s grpc.ServiceRegistrar, srv TwirlerAPIServer) {
	s.RegisterService(&TwirlerAPI_ServiceDesc, srv)
}

func _TwirlerAPI_AttachBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwirlerAPIServer).AttachBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwirlerAPI_AttachBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwirlerAPIServer).AttachBanner(ctx, req.(*AttachBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwirlerAPI_DetachBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwirlerAPIServer).DetachBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwirlerAPI_DetachBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwirlerAPIServer).DetachBanner(ctx, req.(*DetachBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwirlerAPI_IncrementCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwirlerAPIServer).IncrementCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwirlerAPI_IncrementCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwirlerAPIServer).IncrementCount(ctx, req.(*IncrementCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwirlerAPI_Gimme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GimmeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwirlerAPIServer).Gimme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwirlerAPI_Gimme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwirlerAPIServer).Gimme(ctx, req.(*GimmeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TwirlerAPI_ServiceDesc is the grpc.ServiceDesc for TwirlerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwirlerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "twirler.v1.TwirlerAPI",
	HandlerType: (*TwirlerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AttachBanner",
			Handler:    _TwirlerAPI_AttachBanner_Handler,
		},
		{
			MethodName: "DetachBanner",
			Handler:    _TwirlerAPI_DetachBanner_Handler,
		},
		{
			MethodName: "IncrementCount",
			Handler:    _TwirlerAPI_IncrementCount_Handler,
		},
		{
			MethodName: "Gimme",
			Handler:    _TwirlerAPI_Gimme_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/twirler_api.proto",
}
